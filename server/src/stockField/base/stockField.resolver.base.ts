/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStockFieldArgs } from "./CreateStockFieldArgs";
import { UpdateStockFieldArgs } from "./UpdateStockFieldArgs";
import { DeleteStockFieldArgs } from "./DeleteStockFieldArgs";
import { StockFieldCountArgs } from "./StockFieldCountArgs";
import { StockFieldFindManyArgs } from "./StockFieldFindManyArgs";
import { StockFieldFindUniqueArgs } from "./StockFieldFindUniqueArgs";
import { StockField } from "./StockField";
import { StockFieldService } from "../stockField.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StockField)
export class StockFieldResolverBase {
  constructor(
    protected readonly service: StockFieldService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StockField",
    action: "read",
    possession: "any",
  })
  async _stockFieldsMeta(
    @graphql.Args() args: StockFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StockField])
  @nestAccessControl.UseRoles({
    resource: "StockField",
    action: "read",
    possession: "any",
  })
  async stockFields(
    @graphql.Args() args: StockFieldFindManyArgs
  ): Promise<StockField[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StockField, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StockField",
    action: "read",
    possession: "own",
  })
  async stockField(
    @graphql.Args() args: StockFieldFindUniqueArgs
  ): Promise<StockField | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StockField)
  @nestAccessControl.UseRoles({
    resource: "StockField",
    action: "create",
    possession: "any",
  })
  async createStockField(
    @graphql.Args() args: CreateStockFieldArgs
  ): Promise<StockField> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StockField)
  @nestAccessControl.UseRoles({
    resource: "StockField",
    action: "update",
    possession: "any",
  })
  async updateStockField(
    @graphql.Args() args: UpdateStockFieldArgs
  ): Promise<StockField | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockField)
  @nestAccessControl.UseRoles({
    resource: "StockField",
    action: "delete",
    possession: "any",
  })
  async deleteStockField(
    @graphql.Args() args: DeleteStockFieldArgs
  ): Promise<StockField | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
