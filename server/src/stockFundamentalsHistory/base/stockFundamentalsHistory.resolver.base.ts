/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStockFundamentalsHistoryArgs } from "./CreateStockFundamentalsHistoryArgs";
import { UpdateStockFundamentalsHistoryArgs } from "./UpdateStockFundamentalsHistoryArgs";
import { DeleteStockFundamentalsHistoryArgs } from "./DeleteStockFundamentalsHistoryArgs";
import { StockFundamentalsHistoryCountArgs } from "./StockFundamentalsHistoryCountArgs";
import { StockFundamentalsHistoryFindManyArgs } from "./StockFundamentalsHistoryFindManyArgs";
import { StockFundamentalsHistoryFindUniqueArgs } from "./StockFundamentalsHistoryFindUniqueArgs";
import { StockFundamentalsHistory } from "./StockFundamentalsHistory";
import { StockFundamentalsHistoryService } from "../stockFundamentalsHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StockFundamentalsHistory)
export class StockFundamentalsHistoryResolverBase {
  constructor(
    protected readonly service: StockFundamentalsHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StockFundamentalsHistory",
    action: "read",
    possession: "any",
  })
  async _stockFundamentalsHistoriesMeta(
    @graphql.Args() args: StockFundamentalsHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StockFundamentalsHistory])
  @nestAccessControl.UseRoles({
    resource: "StockFundamentalsHistory",
    action: "read",
    possession: "any",
  })
  async stockFundamentalsHistories(
    @graphql.Args() args: StockFundamentalsHistoryFindManyArgs
  ): Promise<StockFundamentalsHistory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StockFundamentalsHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StockFundamentalsHistory",
    action: "read",
    possession: "own",
  })
  async stockFundamentalsHistory(
    @graphql.Args() args: StockFundamentalsHistoryFindUniqueArgs
  ): Promise<StockFundamentalsHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StockFundamentalsHistory)
  @nestAccessControl.UseRoles({
    resource: "StockFundamentalsHistory",
    action: "create",
    possession: "any",
  })
  async createStockFundamentalsHistory(
    @graphql.Args() args: CreateStockFundamentalsHistoryArgs
  ): Promise<StockFundamentalsHistory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StockFundamentalsHistory)
  @nestAccessControl.UseRoles({
    resource: "StockFundamentalsHistory",
    action: "update",
    possession: "any",
  })
  async updateStockFundamentalsHistory(
    @graphql.Args() args: UpdateStockFundamentalsHistoryArgs
  ): Promise<StockFundamentalsHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockFundamentalsHistory)
  @nestAccessControl.UseRoles({
    resource: "StockFundamentalsHistory",
    action: "delete",
    possession: "any",
  })
  async deleteStockFundamentalsHistory(
    @graphql.Args() args: DeleteStockFundamentalsHistoryArgs
  ): Promise<StockFundamentalsHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
