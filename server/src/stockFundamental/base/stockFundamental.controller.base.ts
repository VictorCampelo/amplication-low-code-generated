/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StockFundamentalService } from "../stockFundamental.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StockFundamentalCreateInput } from "./StockFundamentalCreateInput";
import { StockFundamentalWhereInput } from "./StockFundamentalWhereInput";
import { StockFundamentalWhereUniqueInput } from "./StockFundamentalWhereUniqueInput";
import { StockFundamentalFindManyArgs } from "./StockFundamentalFindManyArgs";
import { StockFundamentalUpdateInput } from "./StockFundamentalUpdateInput";
import { StockFundamental } from "./StockFundamental";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StockFundamentalControllerBase {
  constructor(
    protected readonly service: StockFundamentalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StockFundamental })
  @swagger.ApiBody({
    type: StockFundamentalCreateInput,
  })
  @nestAccessControl.UseRoles({
    resource: "StockFundamental",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: StockFundamentalCreateInput
  ): Promise<StockFundamental> {
    return await this.service.create({
      data: data,
      select: {
        c5y: true,
        cotacao: true,
        createdAt: true,
        divbpatr: true,
        dy: true,
        evebit: true,
        evebitda: true,
        id: true,
        liq2m: true,
        liqc: true,
        mrgebit: true,
        mrgliq: true,
        pa: true,
        pacl: true,
        papel: true,
        patrliq: true,
        pcg: true,
        pebit: true,
        pl: true,
        psr: true,
        pvp: true,
        roe: true,
        roic: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [StockFundamental] })
  @ApiNestedQuery(StockFundamentalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StockFundamental",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<StockFundamental[]> {
    const args = plainToClass(StockFundamentalFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        c5y: true,
        cotacao: true,
        createdAt: true,
        divbpatr: true,
        dy: true,
        evebit: true,
        evebitda: true,
        id: true,
        liq2m: true,
        liqc: true,
        mrgebit: true,
        mrgliq: true,
        pa: true,
        pacl: true,
        papel: true,
        patrliq: true,
        pcg: true,
        pebit: true,
        pl: true,
        psr: true,
        pvp: true,
        roe: true,
        roic: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StockFundamental })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StockFundamental",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: StockFundamentalWhereUniqueInput
  ): Promise<StockFundamental | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        c5y: true,
        cotacao: true,
        createdAt: true,
        divbpatr: true,
        dy: true,
        evebit: true,
        evebitda: true,
        id: true,
        liq2m: true,
        liqc: true,
        mrgebit: true,
        mrgliq: true,
        pa: true,
        pacl: true,
        papel: true,
        patrliq: true,
        pcg: true,
        pebit: true,
        pl: true,
        psr: true,
        pvp: true,
        roe: true,
        roic: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StockFundamental })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: StockFundamentalUpdateInput,
  })
  @nestAccessControl.UseRoles({
    resource: "StockFundamental",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: StockFundamentalWhereUniqueInput,
    @common.Body() data: StockFundamentalUpdateInput
  ): Promise<StockFundamental | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          c5y: true,
          cotacao: true,
          createdAt: true,
          divbpatr: true,
          dy: true,
          evebit: true,
          evebitda: true,
          id: true,
          liq2m: true,
          liqc: true,
          mrgebit: true,
          mrgliq: true,
          pa: true,
          pacl: true,
          papel: true,
          patrliq: true,
          pcg: true,
          pebit: true,
          pl: true,
          psr: true,
          pvp: true,
          roe: true,
          roic: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StockFundamental })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StockFundamental",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: StockFundamentalWhereUniqueInput
  ): Promise<StockFundamental | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          c5y: true,
          cotacao: true,
          createdAt: true,
          divbpatr: true,
          dy: true,
          evebit: true,
          evebitda: true,
          id: true,
          liq2m: true,
          liqc: true,
          mrgebit: true,
          mrgliq: true,
          pa: true,
          pacl: true,
          papel: true,
          patrliq: true,
          pcg: true,
          pebit: true,
          pl: true,
          psr: true,
          pvp: true,
          roe: true,
          roic: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
