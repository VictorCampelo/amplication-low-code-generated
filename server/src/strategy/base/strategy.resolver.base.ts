/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStrategyArgs } from "./CreateStrategyArgs";
import { UpdateStrategyArgs } from "./UpdateStrategyArgs";
import { DeleteStrategyArgs } from "./DeleteStrategyArgs";
import { StrategyCountArgs } from "./StrategyCountArgs";
import { StrategyFindManyArgs } from "./StrategyFindManyArgs";
import { StrategyFindUniqueArgs } from "./StrategyFindUniqueArgs";
import { Strategy } from "./Strategy";
import { User } from "../../user/base/User";
import { StrategyService } from "../strategy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Strategy)
export class StrategyResolverBase {
  constructor(
    protected readonly service: StrategyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "read",
    possession: "any",
  })
  async _strategiesMeta(
    @graphql.Args() args: StrategyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Strategy])
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "read",
    possession: "any",
  })
  async strategies(
    @graphql.Args() args: StrategyFindManyArgs
  ): Promise<Strategy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Strategy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "read",
    possession: "own",
  })
  async strategy(
    @graphql.Args() args: StrategyFindUniqueArgs
  ): Promise<Strategy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Strategy)
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "create",
    possession: "any",
  })
  async createStrategy(
    @graphql.Args() args: CreateStrategyArgs
  ): Promise<Strategy> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        author: args.data.author
          ? {
              connect: args.data.author,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Strategy)
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "update",
    possession: "any",
  })
  async updateStrategy(
    @graphql.Args() args: UpdateStrategyArgs
  ): Promise<Strategy | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          author: args.data.author
            ? {
                connect: args.data.author,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Strategy)
  @nestAccessControl.UseRoles({
    resource: "Strategy",
    action: "delete",
    possession: "any",
  })
  async deleteStrategy(
    @graphql.Args() args: DeleteStrategyArgs
  ): Promise<Strategy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "author",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldAuthor(
    @graphql.Parent() parent: Strategy
  ): Promise<User | null> {
    const result = await this.service.getAuthor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
